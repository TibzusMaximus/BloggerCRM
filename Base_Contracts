class Contract(Base):
    """
    Таблица contracts — договоры между исполнителем и клиентом.
    """
    __tablename__ = "contracts"
    __table_args__ = (
        UniqueConstraint("executor_id", "client_id", "contract_number", name="uq_contract_executor_client_number"),
    )

    contract_id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)

    executor_id: Mapped[int] = mapped_column(
        BigInteger,
        ForeignKey("executors.executor_id", ondelete="RESTRICT"),
        nullable=False
    )
    client_id: Mapped[int] = mapped_column(
        BigInteger,
        ForeignKey("clients.client_id", ondelete="RESTRICT"),
        nullable=False
    )

    contract_number: Mapped[str] = mapped_column(Text, nullable=False)   # номер договора
    contract_date: Mapped[date] = mapped_column(Date, nullable=False)    # дата договора (DATE)

    # --- Тип договора: код + текст ---
    contract_type_code: Mapped[int | None] = mapped_column(SmallInteger) # код типа
    contract_type_name: Mapped[str | None] = mapped_column(Text)         # название типа

    contract_file_path: Mapped[str | None] = mapped_column(Text)         # путь к .doc/.docx

    executor: Mapped["Executor"] = relationship(back_populates="contracts")
    client: Mapped["Client"] = relationship(back_populates="contracts")

    applications: Mapped[list["Application"]] = relationship(
        back_populates="contract",
        cascade="all, delete-orphan"
    )

    def __repr__(self) -> str:
        return (f"<Contract id={self.contract_id} number={self.contract_number!r} "
                f"date={self.contract_date} type=({self.contract_type_code}, {self.contract_type_name!r})>")
