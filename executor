"""
База данных исполнителей
"""

from __future__ import annotations
from sqlalchemy import BigInteger, SmallInteger, Text, Numeric, UniqueConstraint
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column


class Base(DeclarativeBase):
    """Базовый класс для моделей SQLAlchemy"""
    pass


class Executor(Base):
    """
    Модель таблицы executors.
    Хранит данные об исполнителях CRM-системы.
    """
    __tablename__ = "executors"
    __table_args__ = (
        UniqueConstraint("inn_executor", name="uq_executors_inn"),
        UniqueConstraint("ogrn_executor", name="uq_executors_ogrn"),
    )

    executor_id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)

    inn_executor: Mapped[str] = mapped_column(Text, nullable=False)         # ИНН (текст)
    ogrn_executor: Mapped[int] = mapped_column(BigInteger, nullable=False)  # ОГРН
    kpp_executor: Mapped[int | None] = mapped_column(BigInteger)            # КПП

    name_executor: Mapped[str] = mapped_column(Text, nullable=False)        # Название исполнителя
    form_executor: Mapped[int | None] = mapped_column(SmallInteger)         # Форма (код ОПФ)

    bank_executor: Mapped[str | None] = mapped_column(Text)                 # Банк
    korakk_executor: Mapped[int | None] = mapped_column(Numeric(20, 0))     # Корр. счёт
    bankakk_executor: Mapped[int | None] = mapped_column(Numeric(20, 0))    # Расчётный счёт
    bik_executor: Mapped[int | None] = mapped_column(BigInteger)            # БИК

    phone_executor: Mapped[str | None] = mapped_column(Text)                # Телефон
    mail_executor: Mapped[str | None] = mapped_column(Text)                 # Email
    social_executor: Mapped[str | None] = mapped_column(Text)               # Соцсети / сайт

    def __repr__(self) -> str:
        return f"<Executor id={self.executor_id} name={self.name_executor!r} inn={self.inn_executor!r}>"
