"""
Единая база данных CRM: Исполнители, Клиенты, Договоры, Приложения.
- Все даты: тип DATE (python: datetime.date).
- Удаление исполнителя НЕ удаляет клиентов (RESTRICT).
- Договоры ссылаются на исполнителя и клиента (RESTRICT).
- Приложения каскадно удаляются при удалении договора (CASCADE).
"""

from __future__ import annotations
from datetime import date
from sqlalchemy import (
    BigInteger, SmallInteger, Text, Numeric, Date,
    ForeignKey, UniqueConstraint
)
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship


# ---------------------- Base ----------------------
class Base(DeclarativeBase):
    """Единая Declarative Base для всех моделей"""
    pass


# ------------------- Исполнители -------------------
class Executor(Base):
    """
    Таблица executors — исполнители.
    """
    __tablename__ = "executors"
    __table_args__ = (
        UniqueConstraint("inn_executor", name="uq_executors_inn"),
        UniqueConstraint("ogrn_executor", name="uq_executors_ogrn"),
    )

    executor_id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)

    inn_executor: Mapped[str] = mapped_column(Text, nullable=False)         # ИНН (текст)
    ogrn_executor: Mapped[int] = mapped_column(BigInteger, nullable=False)  # ОГРН
    kpp_executor: Mapped[int | None] = mapped_column(BigInteger)            # КПП

    name_executor: Mapped[str] = mapped_column(Text, nullable=False)
    form_executor: Mapped[int | None] = mapped_column(SmallInteger)

    bank_executor: Mapped[str | None] = mapped_column(Text)
    korakk_executor: Mapped[int | None] = mapped_column(Numeric(20, 0))
    bankakk_executor: Mapped[int | None] = mapped_column(Numeric(20, 0))
    bik_executor: Mapped[int | None] = mapped_column(BigInteger)

    phone_executor: Mapped[str | None] = mapped_column(Text)
    mail_executor: Mapped[str | None] = mapped_column(Text)
    social_executor: Mapped[str | None] = mapped_column(Text)

    # Важно: без каскадного удаления клиентов
    clients: Mapped[list["Client"]] = relationship(back_populates="executor")

    # По желанию: доступ к договорам исполнителя
    contracts: Mapped[list["Contract"]] = relationship(back_populates="executor")

    def __repr__(self) -> str:
        return f"<Executor id={self.executor_id} name={self.name_executor!r} inn={self.inn_executor!r}>"


# --------------------- Клиенты ---------------------
class Client(Base):
    """
    Таблица clients — клиенты.
    """
    __tablename__ = "clients"
    __table_args__ = (
        UniqueConstraint("inn_client", name="uq_clients_inn"),
        UniqueConstraint("ogrn_client", name="uq_clients_ogrn"),
    )

    client_id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)

    inn_client: Mapped[str] = mapped_column(Text, nullable=False)         # ИНН (текст)
    ogrn_client: Mapped[int] = mapped_column(BigInteger, nullable=False)  # ОГРН
    kpp_client: Mapped[int | None] = mapped_column(BigInteger)            # КПП

    name_client: Mapped[str] = mapped_column(Text, nullable=False)
    form_client: Mapped[int | None] = mapped_column(SmallInteger)

    bank_client: Mapped[str | None] = mapped_column(Text)
    korakk_client: Mapped[int | None] = mapped_column(Numeric(20, 0))
    bankakk_client: Mapped[int | None] = mapped_column(Numeric(20, 0))
    bik_client: Mapped[int | None] = mapped_column(BigInteger)

    phone_client: Mapped[str | None] = mapped_column(Text)                # телефон (текст)
    mail_client: Mapped[str | None] = mapped_column(Text)
    social_client: Mapped[str | None] = mapped_column(Text)

    # Привязка к исполнителю; удаление исполнителя запрещено, если есть клиенты
    executor_id: Mapped[int] = mapped_column(
        BigInteger,
        ForeignKey("executors.executor_id", ondelete="RESTRICT"),
        nullable=False
    )
    executor: Mapped["Executor"] = relationship(back_populates="clients")

    # По желанию: доступ к договорам клиента
    contracts: Mapped[list["Contract"]] = relationship(back_populates="client")

    def __repr__(self) -> str:
        return f"<Client id={self.client_id} name={self.name_client!r} inn={self.inn_client!r} executor_id={self.executor_id}>"


# --------------------- Договоры ---------------------
class Contract(Base):
    """
    Таблица contracts — договоры между исполнителем и клиентом.
    """
    __tablename__ = "contracts"
    __table_args__ = (
        # Уникальность номера договора в разрезе (исполнитель, клиент) — опционально, но полезно
        UniqueConstraint("executor_id", "client_id", "contract_number", name="uq_contract_executor_client_number"),
    )

    contract_id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)

    executor_id: Mapped[int] = mapped_column(
        BigInteger,
        ForeignKey("executors.executor_id", ondelete="RESTRICT"),
        nullable=False
    )
    client_id: Mapped[int] = mapped_column(
        BigInteger,
        ForeignKey("clients.client_id", ondelete="RESTRICT"),
        nullable=False
    )

    contract_number: Mapped[str] = mapped_column(Text, nullable=False)   # номер договора (строка)
    contract_date: Mapped[date] = mapped_column(Date, nullable=False)    # дата договора (DATE)
    contract_type: Mapped[int | None] = mapped_column(SmallInteger)      # тип договора (число)
    contract_file_path: Mapped[str | None] = mapped_column(Text)         # путь к .doc/.docx

    executor: Mapped["Executor"] = relationship(back_populates="contracts")
    client: Mapped["Client"] = relationship(back_populates="contracts")

    # Приложения удаляются вместе с договором (обычная практика)
    applications: Mapped[list["Application"]] = relationship(
        back_populates="contract",
        cascade="all, delete-orphan"
    )

    def __repr__(self) -> str:
        return f"<Contract id={self.contract_id} number={self.contract_number!r} date={self.contract_date}>"


# -------------------- Приложения --------------------
class Application(Base):
    """
    Таблица contract_applications — приложения к договору.
    Составной первичный ключ: (contract_id, app_id).
    """
    __tablename__ = "contract_applications"

    contract_id: Mapped[int] = mapped_column(
        BigInteger,
        ForeignKey("contracts.contract_id", ondelete="CASCADE"),
        primary_key=True
    )
    app_id: Mapped[int] = mapped_column(SmallInteger, primary_key=True)  # порядковый номер внутри договора

    service_type: Mapped[int | None] = mapped_column(SmallInteger)       # тип услуги (число)
    placement_address: Mapped[str | None] = mapped_column(Text)          # адрес размещения (текст)
    price: Mapped[str | None] = mapped_column(Text)                      # стоимость (текст, гибкий формат)
    start_date: Mapped[date | None] = mapped_column(Date)                # дата начала (DATE)
    end_date: Mapped[date | None] = mapped_column(Date)                  # дата окончания (DATE)
    coverage: Mapped[str | None] = mapped_column(Text)                   # охват (текст)
    currency: Mapped[int | None] = mapped_column(SmallInteger)           # валюта (числовой код)
    ad_file_path: Mapped[str | None] = mapped_column(Text)               # путь к файлу рекламы на сервере

    contract: Mapped["Contract"] = relationship(back_populates="applications")

    def __repr__(self) -> str:
        return f"<Application contract_id={self.contract_id} app_id={self.app_id}>"
