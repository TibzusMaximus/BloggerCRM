from __future__ import annotations
from sqlalchemy import BigInteger, SmallInteger, Text, Numeric, UniqueConstraint
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship


class Base(DeclarativeBase):
    pass


class Executor(Base):
    __tablename__ = "executors"
    __table_args__ = (
        UniqueConstraint("inn_executor", name="uq_executors_inn"),
        UniqueConstraint("ogrn_executor", name="uq_executors_ogrn"),
    )

    executor_id: Mapped[int] = mapped_column(BigInteger, primary_key=True, autoincrement=True)

    inn_executor: Mapped[str] = mapped_column(Text, nullable=False)
    ogrn_executor: Mapped[int] = mapped_column(BigInteger, nullable=False)
    kpp_executor: Mapped[int | None] = mapped_column(BigInteger)

    name_executor: Mapped[str] = mapped_column(Text, nullable=False)
    form_executor: Mapped[int | None] = mapped_column(SmallInteger)

    bank_executor: Mapped[str | None] = mapped_column(Text)
    korakk_executor: Mapped[int | None] = mapped_column(Numeric(20, 0))
    bankakk_executor: Mapped[int | None] = mapped_column(Numeric(20, 0))
    bik_executor: Mapped[int | None] = mapped_column(BigInteger)

    phone_executor: Mapped[str | None] = mapped_column(Text)
    mail_executor: Mapped[str | None] = mapped_column(Text)
    social_executor: Mapped[str | None] = mapped_column(Text)

    # Важно: БЕЗ каскадного удаления клиентов
    clients: Mapped[list["Client"]] = relationship(back_populates="executor")

    def __repr__(self) -> str:
        return f"<Executor id={self.executor_id} name={self.name_executor!r} inn={self.inn_executor!r}>"
